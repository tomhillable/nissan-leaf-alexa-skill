AWSTemplateFormatVersion: '2010-09-09'

Transform: 'AWS::Serverless-2016-10-31'

Description: Deploys the nissan-leaf-alexa-skill

Parameters:

  Name:
    Type: String
    Default: nissan-leaf-alexa-skill
  
  NissanUsername:
    Default: /Secrets/Nissan/Username
    Description: The nissan carwings username
    Type: AWS::SSM::Parameter::Value<String>
    NoEcho: true
  
  NissanPassword:
    Default: /Secrets/Nissan/Password
    Description: The nissan carwings password
    Type: AWS::SSM::Parameter::Value<String>
    NoEcho: true

Resources:

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Get Leaf battery status from Nissan",
          "StartAt": "RequestUpdate",
          "States": {

            "RequestUpdate": {
              "Type": "Task",
              "Resource": "${RequestUpdateFunction.Arn}",
              "Next": "RequestUpdateStatus"
            },

            "RequestUpdateStatus": {
              "Type": "Task",
              "Resource": "${RequestUpdateStatusFunction.Arn}",
              "Next": "IsUpdateAvailable",
              "ResultPath": "$.RequestUpdateStatus"
            },

            "WaitForUpdate": {
              "Type": "Wait",
              "Seconds": 5,
              "Next": "RequestUpdateStatus"
            },

            "IsUpdateAvailable": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.RequestUpdateStatus.updateAvailable",
                  "BooleanEquals": true,
                  "Next": "SuccessState"
                },
                {
                  "Variable": "$.RequestUpdateStatus.updateAvailable",
                  "BooleanEquals": false,
                  "Next": "WaitForUpdate"
                }
              ],
              "Default": "FailState"
            },
            
            "FailState": {
              "Type": "Fail",
              "Cause": "Invalid response.",
              "Error": "Invalid response from RequestUpdateStatus"
            },
            
            "SuccessState": {
              "Type": "Succeed"
            }
          }
        }

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: !Sub "/${Name}/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub "states.${AWS::Region}.${AWS::URLSuffix}"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt RequestUpdateFunction.Arn
                  - !GetAtt RequestUpdateStatusFunction.Arn

  RequestUpdateFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handlers.request_update
      Runtime: python3.6
      CodeUri: ../dist
      Timeout: 20
      Role: !GetAtt FunctionExecutionRole.Arn
      Environment:
        Variables:
          CARWINGS_USERNAME: !Ref NissanUsername
          CARWINGS_PASSWORD: !Ref NissanPassword
      
  RequestUpdateFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${RequestUpdateFunction}'
      RetentionInDays: 3

  RequestUpdateStatusFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handlers.request_update_status
      Runtime: python3.6
      CodeUri: ../dist
      Timeout: 20
      Role: !GetAtt FunctionExecutionRole.Arn
      Environment:
        Variables:
          CARWINGS_USERNAME: !Ref NissanUsername
          CARWINGS_PASSWORD: !Ref NissanPassword
      
  RequestUpdateStatusFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${RequestUpdateStatusFunction}'
      RetentionInDays: 3

  FunctionExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: !Sub '/${Name}/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

